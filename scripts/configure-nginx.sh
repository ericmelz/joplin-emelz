#!/bin/bash

# Configure nginx reverse proxy for joplin.emelz.org on AWS instance
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

debug() {
    echo -e "${BLUE}[DEBUG]${NC} $1"
}

usage() {
    echo "Usage: $0 [OPTIONS]"
    echo "Configure nginx reverse proxy for Joplin server on AWS instance"
    echo ""
    echo "Options:"
    echo "  --domain DOMAIN     Domain name (default: joplin.emelz.org)"
    echo "  --traefik-port PORT Traefik NodePort (default: 30080)"
    echo "  --ssl               Enable SSL with Let's Encrypt (default: true)"
    echo "  --dry-run           Show configuration without applying"
    echo "  --help              Show this help message"
    echo ""
    echo "This script should be run on the AWS instance where nginx is installed."
    echo "It configures nginx to proxy traffic to the k3s cluster's traefik ingress."
}

# Default values
DOMAIN="joplin.emelz.org"
TRAEFIK_PORT="30080"
ENABLE_SSL=true
DRY_RUN=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --domain)
            DOMAIN="$2"
            shift 2
            ;;
        --traefik-port)
            TRAEFIK_PORT="$2"
            shift 2
            ;;
        --ssl)
            ENABLE_SSL=true
            shift
            ;;
        --no-ssl)
            ENABLE_SSL=false
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --help)
            usage
            exit 0
            ;;
        *)
            error "Unknown option: $1"
            usage >&2
            exit 1
            ;;
    esac
done

# Check if running on the correct system
check_system() {
    if [[ ! -f /etc/nginx/nginx.conf ]]; then
        error "Nginx not found. This script should run on the AWS instance with nginx installed."
        exit 1
    fi

    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root (use sudo)"
        exit 1
    fi

    info "System check passed - nginx found and running as root"
}

# Create nginx site configuration
create_nginx_config() {
    local config_file="/etc/nginx/sites-available/joplin-proxy"

    info "Creating nginx configuration for $DOMAIN"

    cat > "$config_file" << EOF
# Nginx reverse proxy configuration for Joplin server
# Generated by configure-nginx.sh

upstream joplin_traefik {
    server 127.0.0.1:$TRAEFIK_PORT;
}

# HTTP server block - redirect to HTTPS
server {
    listen 80;
    server_name $DOMAIN;

    # Let's Encrypt ACME challenge
    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }

    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://\$server_name\$request_uri;
    }
}

EOF

    if $ENABLE_SSL; then
        cat >> "$config_file" << EOF
# HTTPS server block
server {
    listen 443 ssl http2;
    server_name $DOMAIN;

    # SSL certificate paths (Let's Encrypt)
    ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Proxy configuration
    location / {
        proxy_pass http://joplin_traefik;

        # Standard proxy headers
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header X-Forwarded-Host \$host;
        proxy_set_header X-Forwarded-Port \$server_port;

        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }

    # Health check endpoint
    location /nginx-health {
        access_log off;
        return 200 "nginx healthy\n";
        add_header Content-Type text/plain;
    }
}

EOF
    else
        cat >> "$config_file" << EOF
# HTTP server block (SSL disabled)
server {
    listen 80;
    server_name $DOMAIN;

    # Proxy configuration
    location / {
        proxy_pass http://joplin_traefik;

        # Standard proxy headers
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header X-Forwarded-Host \$host;
        proxy_set_header X-Forwarded-Port \$server_port;

        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}

EOF
    fi

    info "Created nginx configuration: $config_file"
}

# Enable nginx site
enable_site() {
    local sites_enabled="/etc/nginx/sites-enabled/joplin-proxy"
    local sites_available="/etc/nginx/sites-available/joplin-proxy"

    if [[ -L "$sites_enabled" ]]; then
        info "Site already enabled, removing old symlink"
        rm "$sites_enabled"
    fi

    info "Enabling nginx site"
    ln -s "$sites_available" "$sites_enabled"
}

# Test nginx configuration
test_nginx_config() {
    info "Testing nginx configuration"
    if nginx -t; then
        info "✅ Nginx configuration test passed"
    else
        error "❌ Nginx configuration test failed"
        exit 1
    fi
}

# Setup Let's Encrypt SSL certificate
setup_ssl() {
    if ! $ENABLE_SSL; then
        info "SSL disabled, skipping certificate setup"
        return
    fi

    info "Setting up Let's Encrypt SSL certificate for $DOMAIN"

    # Check if certbot is installed
    if ! command -v certbot &> /dev/null; then
        error "Certbot not installed. Install with: apt update && apt install -y certbot python3-certbot-nginx"
        exit 1
    fi

    # Check if certificate already exists
    if [[ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]]; then
        info "SSL certificate already exists for $DOMAIN"
        return
    fi

    # Temporarily create a simple nginx config for ACME challenge
    info "Creating temporary nginx config for ACME challenge"
    cat > /etc/nginx/sites-available/temp-acme << EOF
server {
    listen 80;
    server_name $DOMAIN;

    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }

    location / {
        return 200 "ACME challenge setup";
        add_header Content-Type text/plain;
    }
}
EOF

    # Enable temp config and reload
    ln -sf /etc/nginx/sites-available/temp-acme /etc/nginx/sites-enabled/temp-acme
    systemctl reload nginx

    # Request certificate
    info "Requesting SSL certificate from Let's Encrypt"
    if certbot certonly --webroot -w /var/www/html -d "$DOMAIN" --non-interactive --agree-tos --email "admin@emelz.org"; then
        info "✅ SSL certificate obtained successfully"
    else
        error "❌ Failed to obtain SSL certificate"
        exit 1
    fi

    # Clean up temp config
    rm -f /etc/nginx/sites-enabled/temp-acme
    rm -f /etc/nginx/sites-available/temp-acme
}

# Reload nginx
reload_nginx() {
    info "Reloading nginx configuration"
    if systemctl reload nginx; then
        info "✅ Nginx reloaded successfully"
    else
        error "❌ Failed to reload nginx"
        exit 1
    fi
}

# Verify traefik connectivity
verify_traefik() {
    info "Verifying traefik connectivity on port $TRAEFIK_PORT"

    if curl -f -s "http://127.0.0.1:$TRAEFIK_PORT/ping" > /dev/null; then
        info "✅ Traefik is responding on port $TRAEFIK_PORT"
    else
        warn "⚠️  Traefik not responding on port $TRAEFIK_PORT"
        echo "Make sure traefik is running in the k3s cluster with NodePort service"
        echo "Check with: kubectl get svc -n kube-system traefik"
    fi
}

# Main execution
main() {
    info "Configuring nginx reverse proxy for $DOMAIN"

    if $DRY_RUN; then
        info "DRY RUN MODE - No changes will be applied"
    fi

    check_system

    if ! $DRY_RUN; then
        create_nginx_config
        enable_site
        test_nginx_config

        if $ENABLE_SSL; then
            setup_ssl
            # Recreate config with SSL after certificate is obtained
            create_nginx_config
            test_nginx_config
        fi

        reload_nginx
        verify_traefik

        info "✅ Nginx configuration complete!"
        echo ""
        info "Next steps:"
        echo "  1. Ensure DNS points $DOMAIN to this server"
        echo "  2. Configure traefik ingress in the k3s cluster"
        echo "  3. Test access: curl -H 'Host: $DOMAIN' http://127.0.0.1:$TRAEFIK_PORT"

        if $ENABLE_SSL; then
            echo "  4. Test SSL: curl https://$DOMAIN"
        fi
    else
        info "Configuration would be created for:"
        echo "  Domain: $DOMAIN"
        echo "  Traefik port: $TRAEFIK_PORT"
        echo "  SSL enabled: $ENABLE_SSL"
    fi
}

main "$@"